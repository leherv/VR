version: '3.7'

services:
  vr:
    container_name: vr
    image: vr:latest
    build: .
    environment:
      VR_NOTIFIERSETTINGS__DISCORDSETTINGS__APIKEY: "${VR_NOTIFIERSETTINGS__DISCORDSETTINGS__APIKEY}"
      VR_SCRAPESETTINGS__SCRAPEINTERVALMINUTES: "${VR_SCRAPESETTINGS__SCRAPEINTERVALMINUTES}"
      VR_SCRAPESETTINGS__CHROMEPATH: "${VR_SCRAPESETTINGS__CHROMEPATH}"
      VR_CONNECTIONSTRINGS__DB: "${VR_CONNECTIONSTRINGS__DB}"
    networks:
      - vr
    restart: always
    depends_on:
      vr_db:
        condition: service_healthy

  vr_db:
    container_name: vr_db
    image: library/postgres:13.0
    ports:
      - ${VR_PERSISTENCESETTINGS__DBPORT}:5432
    volumes:
      - type: bind
        source: "${VR_PERSISTENCESETTINGS__DBDATADIR}"
        target: /var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${VR_PERSISTENCESETTINGS__DBNAME}"
      POSTGRES_USER: "${VR_PERSISTENCESETTINGS__DBUSERNAME}"
      POSTGRES_PASSWORD: "${VR_PERSISTENCESETTINGS__DBPASSWORD}"
    networks:
      - vr
    restart: always

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${VR_PERSISTENCESETTINGS__DBUSERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
networks:
  vr:
    name: custom_vr